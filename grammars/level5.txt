start: program
program: command (" ")* ("\n"+ command (" ")*)* "\n"* //lines may end on spaces and might be separated by many newlines
command: "repeat " number " times " command -> repeat
         | "print " (quoted_text | list_access | var) (" " (quoted_text | list_access | var))*  -> print
         | "if " equality_check " " command " else " command -> ifelse
         | "if " equality_check " " command -> ifs //if cannot be used in Python, hence ifs
         | text " is ask " textwithspaces punctuation* -> ask
         | text " is " text ((", "|",") text)+  -> assign_list
         | text " is " text -> assign //placing it here means print is will print 'is' and print is Felienne will print 'is Felienne'
         | text " is " var " at " (index | random) -> list_access_var
         | text " " textwithspaces -> invalid

ACCENTED_LETTER: "á" | "é" | "ó"

//TODO: I don't like the " " and "print " in the commands
//would rather have them here but I am unsure how to stop hem from appearing in the tree that way
//leaving as such for now

number: DIGIT+ -> number

equality_check: text " is " text (" and " equality_check)* -> equality_check
var: LETTER+ -> var //TODO: should be used in assign too?
list_access : var " at " (index | random) -> list_access

index : DIGIT+
random : "random"
punctuation : PUNCTUATION -> punctuation
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree

textwithspaces: (LETTER | ACCENTED_LETTER | DIGIT | WS_INLINE)+ -> text

quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \


text: (LETTER | ACCENTED_LETTER | DIGIT)+ -> text

%import common.LETTER   // imports from terminal library
%import common.DIGIT   // imports from terminal library
%import common.WS_INLINE   // imports from terminal library
%import common.NEWLINE   // imports from terminal library



