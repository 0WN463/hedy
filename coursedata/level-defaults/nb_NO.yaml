6:
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} '5 {times} 5 er ' 5 * 5"
        demo_code: "{print} '5 {times] 5 er ' 5 * 5"
    -   name: '{ask}'
        explanation: '{ask} om et regnestykke og sjekk om det er korrekt.'
        example: "Eksempel: svar {is} {ask} 'Hva er 10 pluss 10?'"
        demo_code: "svar = {ask} 'Hva er 10 pluss 10?'\n{if} svar {is} 20 {print} 'Korrekt!' {else} {print} 'Feil'"
    -   name: '`{ask}` {and} `{if}` skilpadde'
        explanation: '{ask} brukeren hvor mange grader de vil ha'
        example: "Eksempel: grader{is} {ask} 'Hvor mange grader?'"
        demo_code: "grader= {ask} 'Hvor mange grader?'\nvinkel = 360 / grader\n{forward} 50"
    start_code: "{print} '5 ganget med 5 er ' 5 * 5"
    intro_text: "## 1 + 1\nP√• dette niv√•et skal du f√• l√¶re noe nytt! Du kan n√• bruke Hedy til √• gj√∏re matte.\n\n√Ö plusse sammen to tall er enkelt, du bare gj√∏r som du ville gjort i mattetimen, for eksempel: `5 + 5`. Minus funker ogs√•: `5 - 5`.\n\n√Ö gange er litt andreledes, fordi det ikke er et {times} symbol p√• tastaturet ditt. Bare se hvis du vil, der er virkelig ikke et gangeteng.\nDerfor bruker vi vanligvis en stjerne `*` n√•r vi ganger. `5 * 5`kan leses som \"5 {times} 5\". Det kan v√¶re du m√• holde inne SHIFT knappen for √• kunne skrive *-tegnet.\n"
    example_code: "## Eksempel Hedy kode\n```\n{print} '5 pluss 5 er ' 5 + 5\n{print} '5 minus 5 er ' 5 - 5\n{print} '5 {times} 5 er ' 5 * 5\n```\n"
    intro_text_2: "Vi skal ogs√• gj√∏re en liten endring i hvordan vi lagrer et ord i en variabel! Du kan n√• bruke `=` istedenfor `{is}` n√•r du lagrer en tekst eller et tall i en variabel, slik:\n"
    example_code_2: "```\nnavn= Hedy\nsvar = 4 + 20\n```\n"
12:
    commands:
    -   name: float directly
        explanation: Desimaltall
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: tildel tekst
        explanation: Text with quotation marks after =
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   name: apostrof etter {if}sammenligning
        explanation: Text with quotation marks after {if}
        example: navn = 'Hedy'
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: hermetegn i liste
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Numbers and texts\n**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n"
    example_code: "## Eksempel Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'Hva heter du??'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
15:
    commands:
    -   name: '{while}'
        explanation: We can use the `{while}` loop with not equal
        example: 'Eksempel: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    -   name: Mindre {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "## More loops!\nWe are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    example_code: "## Eksempel Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
1:
    intro_text: "## Velkommen til Hedy\nP√• Niv√• 1 kan du bruke kommandoene `{print}`, `{ask}` og `{echo}`.\nSkriv koden i programmeringsfeltet, eller trykk p√• den gr√∏nne boksen i eksempelkodeblokken og koden vil bli skrevet for deg!\nPr√∏v koden self med den gr√∏nne 'Kj√∏r kode' knappen under programmeringsfeltet.\n\nDu kan skrive tekst til skjermen ved √• bruke `{print}` kommandoen.\n"
    example_code: "## Eksempelkode\n```\n{print} Hallo!\n{print} Velkomen til Hedy!\n```\n"
    intro_text_2: "Du kan ogs√• sp√∏rre etter input med `{ask}` og gjenta det tilbake med en `{echo}`kommando.\n"
    intro_text_3: "La oss starte! Ikke sikker p√• hva du vil lage? I de neste fanene finner du ideer til programmer √• bygge.\n"
    example_code_2: "## Eksempelkode\n```\n{ask} Hva er navnet ditt?\n{echo} hallo\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: '{print}'
        explanation: '{print} noe med `{print}`.'
        example: 'Eksempel: {print} Hallo, velkommen til Hedy!'
        demo_code: '{print} Hallo velkommen til Hedy!'
    -   name: '{ask}'
        explanation: Still et sp√∏rsm√•l med `{ask}`.
        example: 'Eksempel: {ask} Hva er favorittfargen din?'
        demo_code: '{ask} Hva er favorittfargen din?'
    -   name: '{echo}'
        explanation: gjenta noe med √• bruke `{echo}`.
        example: 'Eksempel: {echo} s√• favorittfargen din er '
        demo_code: "{ask} Hva er favorittfargen din?\n{echo} s√• favorittfargen din er"
    -   name: '{print} emojier'
        explanation: print en emoji med `{print}`
        example: 'Eksempel: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Tegn en linje med `{forward}`.
        example: 'Eksempel: {forward} 100'
        demo_code: '{forward} 100'
    -   name: '{turn}'
        explanation: snu tegneskilpadden med `{turn}`
        example: 'Eksempel: {turn}'
        demo_code: "{forward} 25\n{turn} venstre\n{forward} 25\n{turn} h√∏yre"
2:
    intro_text: "## Variabler\nP√• niv√• 2 l√¶rer vi to nye kommandoer: `{is}` og `{sleep}`.\nDu kan navngi et ord med `{is}`. Dette kalles en variabel. I dette eksempelet har vi laget en variabel kalt 'navn' og en variabel kalt 'alder'. Du kan bruke ordet 'navn' hvor som helst i koden og det vil bli erstattet av Hedy, som dette:\n\nP√• denne m√•ten trenger du ikke lenger `{echo}`kommandoen!\n"
    example_code: "## Eksempelkode\n```\nnavn {is} Hedy\nalder {is} 15\n{print} navn is alder √•r gammel\n```\n"
    intro_text_2: "`{print}` fungerer fortsatt som f√∏r, men `{ask}` kommandoen har endret seg. Fra n√• m√• du bruke en variabel n√•r du bruker `{ask}` kommandoen. Det ser slik ut:\n"
    example_code_2: "```\nsvar {is} {ask} Hva heter du?\n{print} Hallo svar\n```\n"
    intro_text_3: "Enda en ny kommando p√• dette niv√•et er `{sleep}`. Denne kommandoen setter programmet ditt p√• pause i et sekund. Hvis du skriver et tall bak {sleep} kommandoen, vil programmet settes p√• pause i s√• mange sekunder.\n"
    example_code_3: "```\n{print} Min favorittfarge er...\n{sleep} 2\n{print} gr√∏nn!\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: '{is}'
        explanation: Gi et ord et navn som kan brukes andre steder i programmet med kommandoen `{is}`. Du kan velge navnet helt selv.
        example: 'Eksempel: navn {is} Hedy.'
        demo_code: "navn {is} Hedy\n{print} Velkommen navn"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`. Pass p√•! Du m√• gi svaret et navn ved hjelp av `{is}`.
        example: 'Eksempel: farge {is} {ask} Hva er din favorittfarge?'
        demo_code: "farge {is} {ask} Hva er din favorittfarge?\n{print} farge er din favoritt!"
    -   name: '{sleep}'
        explanation: La Hedy f√• seg en pause i et sekund eller fler.
        example: 'Eksempel: {sleep} 2 '
        demo_code: "{print} La meg tenke i et sekund...\n{sleep}\n{print} Hmm.. Jeg trenger tre sekunder til...\n{sleep} 3\n{print} Eureka! Jeg har svaret!"
    -   explanation: Gi et tall et navn ved √• bruke `{is}`. Du kan velge navnet selv.
        example: 'Eksempel: vinkel {is} 90'
        demo_code: "vinkel {is} 90\n{turn} vinkel \n{forward} 100"
        name: er - skilpadde
3:
    intro_text: "## Lag en liste!\nP√• niv√• 3 kan du lage lister. Du kan la datamaskinen velge noe tilfeldig fra listen, du gj√∏r det med `{at} {random}`.\n"
    example_code: "## Eksempel Hedy Code\n\n```\ndyr {is} hund, katt, hest\n{print} dyr {at} {random}\n```\n"
    intro_text_2: Du kan ogs√• legge til ting i listen med `{add}` og fjerne ting fra listen med `{remove}`.
    example_code_2: "## Eksempel Hedy Code\n\n```\ndyr {is} hund, katt, hest\n{add} pingvin {to_list} dyr\n{remove} katt {from} dyr\n{print} dyr {at} {random}\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: velg_tilfeldig
        explanation: Velg et tilfeldig ord fra en liste med `{at}` og `{random}`
        example: 'Eksempel: dyr {is} hun, katt, hest.'
        demo_code: "dyr {is} hund, katt, hest\n{print} dyr {at} {random}"
    -   name: '{add}'
        explanation: legg til en ting i listen
        example: 'Eksempel: {add} hund {to_list} dyr'
        demo_code: "dyr {is} ku, katt\n{add} hund {to_list} dyr"
    -   name: '{remove}'
        explanation: fjern en ting fra en liste
        example: 'Eksempel: {remove} hund {from} dyr'
        demo_code: "dyr {is} katt, hund, ku\n{remove} hund {from} dyr"
4:
    start_code: "{print} 'Hallo verden'"
    intro_text: "## 'Quotation marks'\nP√• niv√• 4 har `{ask}` og`{print}` blitt endret.\n\nDu m√• fra n√• av legge tekst du vil skrive ut mellom fnutter.\n\nDette er nyttig, fordi n√• kan du skrive ut alle ordene du vil. Ogs√• de ordene du har brukt til √• lagre noe med `{is}`.\n\nDe fleste programmeringsspr√•k bruker ogs√• fnutter n√•r de skriver ut ting, s√• vi g√•r alts√• enda et steg n√¶rmere ekte programmering!\n"
    example_code: "## Eksempel Hedy kode\n```\n{print} 'Du m√• bruke fnutter fra n√• av!'\nsvar {is} {ask} 'Hva m√• vi bruke fra n√• av?'\n{print} 'Vi m√• bruke' svar\n```\n"
    intro_text_2: "## Eventyrene blir mer og mer vanskelig\nEventyrene blir mer og mer vanskelig n√• i de rosa fanene.\nS√• det er lurest √• starte til venstre med Fortellingen, og jobbe seg mot h√∏yre. P√• denne m√•ten f√•r du mer og mer utfordring for hvert eventyr.\n"
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} 'Hallo velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{is}'
        explanation: Gi et navn til noe tekst og `{print}` ut uten fnutter
        example: 'Eksempel: navn {is} Hedy.'
        demo_code: "navn {is} Hedy\n{print} 'Mitt navn er ' navn"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge {is} {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
5:
    start_code: "navn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'kult!' {else} {print} 'meh'"
    intro_text: "## Hvis... ellers...\nP√• niv√• 5 er det noe nytt √• l√¶re seg, `{if}`! Med `{if}` kommandoen kan du velge mellom to forskjellige valg.\nDenne koden skriver ut 'nice' hvis du skriver inn Hedy som navn, og 'buu!' hvis du skriver noe annet.\n`{ask}` and `{print}` vil fungere p√• samme m√•te som de gjorde i niv√• 4.\n"
    example_code: "## Eksempel Hedy kode\n```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lister\nHvis vi skal sjekke om noe er i en liste s√• kan vi n√• bruke `{in}` kommandoen.\nDenne koden skriver ut 'Vakkert!' hvis du velger gr√∏nn eller gul, og 'meh' hvis du skriver noe annet.\n"
    example_code_3: "```\nvakre_farger {is} gr√∏nn, gul\nfarge{is} {ask} 'Hva er din favorittfarge?'\n{if} farge {in} vakre_farger {print} 'Vakert!' {else} {print} 'meh'\n```\n"
    intro_text_2: "Noen ganger kan kode som bruker `{if}` bli veldig lang. <br>Du kan splitte koden over to linjer og begynne neste linje med `{else}` slik som dette:\n"
    example_code_2: "```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} 'Hallo, velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge {is} {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt'"
    -   name: '{if}'
        explanation: Ta et valg med `{if}`
        example: "Eksempel: {if} farge {is} gr√∏nn {print} 'vakkert!' {else} {print} 'meh'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'vakkert!' {else} {print} 'meh'"
    -   name: '{if} med skilpadden'
        explanation: Ta et valg med `{if}`
        example: 'Eksempel: {if} svaret {is} langt {forward} 100 {else} {forward} 5'
        demo_code: "svaret {is} {ask} 'Hvor langt skal vi bevege skilpadden?'\n{if} svaret {is} langt {forward} 100 {else} {forward} 5"
    -   name: '{in}'
        explanation: Sjekk om lister inneholder elementer `{in}`
        example: "Eksempel: {if} farge {in} vakre_farger {print} 'Vakkert!' {else} {print} 'meh'"
        demo_code: "vakre_farger {is} gr√∏nn, gul\nfarge {is} {ask} 'Hva er din favoritt farge'\n{if} farge {in} vakre_farger {print} 'Vakkert!' {else} {print} 'meh'"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy er morro!'"
    intro_text: "## Niv√• 7! Niv√• 7!\nNiv√• 7 legger til `{repeat}` kommandoen. {repeat} kan brukes til √• kj√∏re en kodelinje flere ganger.\n"
    example_code: "## Eksempel Hedy kode\n```\n{repeat} 3 {times} {print} 'Hedy {is} morro!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv n√∏yaktiv med bruk av fnutter
        example: "Eksempel: {print} 'Hallo, velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge = {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
    -   name: '{if}'
        explanation: Ta et valg med `{if}`
        example: "Eksempel: {if} farge{is} gr√∏nn {print} 'Vakkert!' {else} {print} 'meh'"
        demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'Vakkert!' {else} {print} 'meh'"
    -   name: '{repeat} - skillpadde'
        explanation: gjenta en kodelinje med `{repeat}`.
        example: 'Eksempel: {repeat} 3 {times} {forward} 10'
        demo_code: '{repeat} 3 {times} {forward} 10'
8:
    start_code: "{repeat} 5 {times}\n    {print} 'Hallo folkens'\n    {print} 'Dette vil bli skrevet ut 5 ganger'"
    intro_text: "## Indentering\n`{ask}` {and} `{print}` fungerer fortsatt slik du er vandt til. Men `{if}` {and} `{repeat}` har endret seg litt!\nDu kan n√• kj√∏re sm√• blokker med kode sammen, men du m√• *indentere* koden.\nDet betyr at du m√• legge til fire mellomrom p√• starten av kodelinjen. Du m√• ogs√• indtentere n√•r du skal lage en blokk p√• en linje.\n"
    example_code: "## Eksempel Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hallo alle sammen'\n    {print} 'Dette blir gjentatt 5 ganger'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv noe. Husk √• bruke fnutter n√•r du skal skrive ut tekst.
        example: "Eksempel: {print} '5 {times} 5 {is} ' 5 * 5"
        demo_code: "{print} '5 {times} 5 {is} ' 5 * 5"
    -   name: '{ask}'
        explanation: sp√∏r om svaret p√• et regnestykke og sjekk om det er rett. Vi kan printe to linjer n√•.
        example: "Eksempel: svaret {is} {ask} 'Hva er 5 pluss 5?'"
        demo_code: "svaret = {ask} 'What is 5 plus 5?'\n{if} svaret {is} 10\n    {print} 'Bra jobbet!'\n    {print} 'Du har helt rett, svaret er ' answer\n{else}\n    {print} 'Oops!'\n    {print} 'Svaret er 10'"
    -   name: '`{repeat}` med skilpadden'
        explanation: '{repeat} flere linjer'
        example: 'Eksempel: tegn en firkant'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    start_code: "{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza er bedre'"
    intro_text: "## Alt p√• en gang n√•!\nIn this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
    example_code: "## Eksempel Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
    commands:
    -   name: '`{if}` with multiple lines'
        explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Eksempel: answer = {ask} 'What is 20 plus 20?'"
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
    -   name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
        example: 'Eksempel : tegn en firkant'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
10:
    start_code: "dyr {is} hund, katt, flyndre\n{for} et_dyr {in} dyr\n  {print} 'I love ' et_dyr"
    intro_text: "## For each item in my list...\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n"
    example_code: "## Eksempel Hedy code\n```\ndyr {is} hund, katt, flyndre\n{for} et_dyr {in} dyr\n  {print} 'I love ' et_dyr\n```\n"
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Eksempel: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{for} med en liste'
        explanation: 'print all things in a list '
        example: 'Eksempel: {for} et_dyr {in} dyr'
        demo_code: "dyr {is} hund, katt, flyndre\n{for} et_dyr {in} dyr\n  {print} 'I love ' et_dyr"
11:
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    intro_text: "## Loops!\n`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program.\nTry it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)\n"
    example_code: "## Eksempel Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Eksempel: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
13:
    start_code: "name = {ask} 'Hva heter du?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: "## And... Or..?\nWe are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.\n"
    example_code: "```\nname = ask 'Hva heter du?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
    commands:
    -   name: '{and}'
        explanation: Two parts both need to be correct
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   name: '{or}'
        explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
14:
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    intro_text: "## Great, Greater, Greatest!\nWe are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n"
    example_code: "## Eksempel Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'Hva heter du??'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'Hva heter du??'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    commands:
    -   name: Mindre
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: St√∏rre
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Lik
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Ikke lik
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: St√∏rre eller lik
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
16:
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "## More and more like real code!\nWe are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n"
    example_code: "## Eksempel Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    commands:
    -   name: firkantparantes
        explanation: Lists with square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "## Level 18\nWe arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hei!')"
    -   name: '{print} med var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
17:
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
    commands:
    -   name: '{elif}'
        explanation: '`{elif}`.'
        example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   name: '{if}'
        explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} gr√∏nn:'
        demo_code: "colour = {ask} 'Hva er din favorittfarge?'\n{if} colour == 'gr√∏nn':\n    {print} 'Your favorite colour is gr√∏nn'\n{else}:\n    {print} 'Your favorite colour is not gr√∏nn'"
